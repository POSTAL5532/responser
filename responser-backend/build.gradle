plugins {
    id 'org.springframework.boot' version '3.1.1'
    id 'io.spring.dependency-management' version '1.1.0'
    id 'java'
}

group = 'com.responser'
version = '0.0.1'
sourceCompatibility = '17'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

jar {
    enabled = false
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect:3.3.0'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation "org.springframework.boot:spring-boot-configuration-processor"
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.httpcomponents.client5:httpclient5:5.2.1'
    implementation 'commons-io:commons-io:2.13.0'

    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.hibernate.orm:hibernate-jpamodelgen:6.1.5.Final'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

tasks.named('test') {
    useJUnitPlatform()
}

ext {
    // Directory for generated main Java sources
    generatedMainJava = "${buildDir}/generated"
}

sourceSets {
    // Add generated sources directory.
    main.java.srcDir generatedMainJava
}

compileJava	{
    options.compilerArgs += ['-AaddGenerationDate=false']
    options.annotationProcessorGeneratedSourcesDirectory = file(generatedMainJava)
}

tasks.named("build") {
    dependsOn("compileLess")
}

task compileLess() {
    description 'Tasks which shows a welcome message'
    def baseLessPath = 'src/main/resources/less'
    def baseCssPath = 'src/main/resources/static/css'
    def lesscCommand = 'lessc'

    doLast {
        exec {
            commandLine 'cmd', '/c', lesscCommand, "${baseLessPath}/component/components.less", "${baseCssPath}/components.css"
        }
        exec {
            commandLine 'cmd', '/c', lesscCommand, "${baseLessPath}/common.less", "${baseCssPath}/common.css"
        }
        exec {
            commandLine 'cmd', '/c', lesscCommand, "${baseLessPath}/fonts.less", "${baseCssPath}/fonts.css"
        }
        exec {
            commandLine 'cmd', '/c', lesscCommand, "${baseLessPath}/templates-styles/index.less", "${baseCssPath}/index.css"
        }
        exec {
            commandLine 'cmd', '/c', lesscCommand, "${baseLessPath}/templates-styles/sitesRating.less", "${baseCssPath}/sitesRating.css"
        }
        exec {
            commandLine 'cmd', '/c', lesscCommand, "${baseLessPath}/templates-styles/webResourceDetails.less", "${baseCssPath}/webResourceDetails.css"
        }
        exec {
            commandLine 'cmd', '/c', lesscCommand, "${baseLessPath}/templates-styles/seeReviewsPage.less", "${baseCssPath}/seeReviewsPage.css"
        }
        exec {
            commandLine 'cmd', '/c', lesscCommand, "${baseLessPath}/templates-styles/reviewPage.less", "${baseCssPath}/reviewPage.css"
        }
        exec {
            commandLine 'cmd', '/c', lesscCommand, "${baseLessPath}/templates-styles/error.less", "${baseCssPath}/error.css"
        }
    }
}