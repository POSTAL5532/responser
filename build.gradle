import groovy.sql.Sql

plugins {
    id 'org.liquibase.gradle' version '2.2.0'
}

group 'space.reviewly'
version '1.0-SNAPSHOT'

configurations {
    liquibaseRuntime.extendsFrom runtime
}

repositories {
    mavenCentral()
}

dependencies {
    liquibaseRuntime 'org.liquibase:liquibase-core:4.24.0'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.1'
    liquibaseRuntime 'info.picocli:picocli:4.7.5'
    liquibaseRuntime 'org.yaml:snakeyaml:1.33'
    liquibaseRuntime 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.2'
    liquibaseRuntime 'org.postgresql:postgresql:42.7.3'
}

tasks.register('startDatabase', Exec) {
    commandLine 'docker', 'compose', 'up', 'reviewly_db', '-d'
    group = "database"
    description = "Start the database docker container"
}

tasks.register('stopDatabase', Exec) {
    commandLine 'docker', 'container', 'stop', 'reviewly_db'
    group = "database"
    description = "Stops the database docker container"
}

tasks.register('deleteDatabaseContainer', Exec) {
    commandLine 'docker', 'container', 'rm', 'reviewly_db'
    group = "database"
    description = "Deletes the database docker container"
}

tasks.register('deleteDatabaseImage', Exec) {
    commandLine 'docker', 'image', 'rm', 'reviewly_db'
    group = "database"
    description = "Deletes the database docker image"
}

tasks.register('deleteDatabaseVolume', Delete) {
    delete "$projectDir/.local/reviewly_db"
    group = "database"
    description = "Deletes the database docker volume"
}

tasks.register('addTestData') {
    group = "database"
    description = "Add test data to database"

    configurations {
        jdbc
    }
    dependencies {
        jdbc 'org.postgresql:postgresql:42.7.3'
    }

    def dburl
    def user
    def password

    doFirst {
        def props = new Properties()
        file("$projectDir/database/localDatabase.properties").withInputStream { props.load(it) }
        dburl = props.getProperty("url")
        user = props.getProperty("username")
        password = props.getProperty("password")
    }

    doLast {
        def sqlClassLoader = Sql.classLoader
        configurations.jdbc.each { sqlClassLoader.addURL it.toURI().toURL() }

        def sqlScript = new File("$projectDir/database/test_data.sql").text
        def sqlCommands = sqlScript.split(';')

        Sql.withInstance(dburl, user, password, 'org.postgresql.Driver') {
            sql ->
                sqlCommands.each { query ->
                    if (!query.trim().isEmpty()) {
                        sql.executeInsert(query.trim())
                    }
                }
        }
    }
}

tasks.register('migrateDatabase') {
    group = "database"
    description = "Migrate database by liquibase"

    doFirst {
        liquibase {
            activities {
                main {
                    defaultsFile "./database/localDatabase.properties"
                }
            }
        }
    }

    finalizedBy(update)
}

tasks.register('deleteStubFiles', Delete) {
    group = "stubFileStorage"
    description = "Clean all local files for stub file storage"

    def props = new Properties()
    file("$projectDir/configs/stub-file-storage/reviewly-file-store-stub.properties").withInputStream { props.load(it) }
    def sitesIconsPath = props.getProperty("sitesIconsPath")
    def usersAvatarsPath = props.getProperty("usersAvatarsPath")

    delete sitesIconsPath, usersAvatarsPath
}

tasks.register('addStubFiles', Copy) {
    group = "stubFileStorage"
    description = "Copy fresh files for stub file storage"

    def props = new Properties()
    file("$projectDir/configs/stub-file-storage/reviewly-file-store-stub.properties").withInputStream { props.load(it) }
    def sitesIconsPath = props.getProperty("sitesIconsPath")
    def usersAvatarsPath = props.getProperty("usersAvatarsPath")

    copy {
        from "$projectDir/reviewly-file-store-stub/files_storage/sites-icons"
        into sitesIconsPath
    }

    copy {
        from "$projectDir/reviewly-file-store-stub/files_storage/users-avatars"
        into usersAvatarsPath
    }
}
